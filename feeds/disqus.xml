<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>JustCramer</title>
    <link href="http://justcramer.com/atom.xml" rel="self"/>
    <updated>2012-04-24T23:36:54-07:00</updated>
    <id>http://justcramer.com/</id>

    
        
            <entry>
                <title>Sticking With Standards</title>
                <link href="http://justcramer.com/2012/04/24/sticking-with-standards"/>
                <updated>2012-04-24T22:23:00-07:00</updated>
                <id>id:/2012/04/24/sticking-with-standards</id>
                <content type="html">More and more I&amp;#8217;m seeing the &amp;#8220;requirements.txt pattern&amp;#8221; come up. This generally refers to projects (but not just), and
seems to have started around the same time as Heroku adopting Python. I feel like this is something that matters in the
Python world, and because I have an &amp;hellip;</content>
                <author>
                    <name>David Cramer</name>
                    <url>http://justcramer.com/</url>
                </author>
            </entry>
        
    
        
            <entry>
                <title>Using Arrays as Materialized Paths in Postgres</title>
                <link href="http://justcramer.com/2012/04/08/using-arrays-as-materialized-paths-in-postgres"/>
                <updated>2012-04-08T16:52:00-07:00</updated>
                <id>id:/2012/04/08/using-arrays-as-materialized-paths-in-postgres</id>
                <content type="html">Something we&amp;#8217;ve been casually working on at Disqus for quite some time is an improved pagination method for threaded comments. This is obviously pretty important to us, it drives the very foundation of our product. It also happens to be an area that&amp;#8217;s somewhat challenging, and has a &amp;hellip;</content>
                <author>
                    <name>David Cramer</name>
                    <url>http://justcramer.com/</url>
                </author>
            </entry>
        
    
        
            <entry>
                <title>Scaling Schema Changes</title>
                <link href="http://justcramer.com/2011/11/10/scaling-schema-changes"/>
                <updated>2011-11-10T16:06:00-08:00</updated>
                <id>id:/2011/11/10/scaling-schema-changes</id>
                <content type="html">I frequently get asked how Disqus deals with schema changes. It&amp;#8217;s a fair question, since we operate a fairly large amount of servers, but I also tend to think the answer is somewhat obvious. So let&amp;#8217;s start with the problem of schema changes at scale (in PostgreSQL).

Generally you have &amp;hellip;</content>
                <author>
                    <name>David Cramer</name>
                    <url>http://justcramer.com/</url>
                </author>
            </entry>
        
    
        
            <entry>
                <title>Integrating Django with Nose at DISQUS</title>
                <link href="http://justcramer.com/2011/08/05/extending-django-nose"/>
                <updated>2011-08-05T00:00:00-07:00</updated>
                <id>id:/2011/08/05/extending-django-nose</id>
                <content type="html">About a month ago we decided to make the transition off of Django&amp;#8217;s test suite over to the Nose runners. Our main selling point was the extensibility, and the existing ecosystem of plugins. Four weeks later I&amp;#8217;m happy to say we&amp;#8217;re running (basically) Nose with some minor extensions &amp;hellip;</content>
                <author>
                    <name>David Cramer</name>
                    <url>http://justcramer.com/</url>
                </author>
            </entry>
        
    
        
            <entry>
                <title>EuroPython</title>
                <link href="http://justcramer.com/2011/06/24/europython"/>
                <updated>2011-06-24T00:00:00-07:00</updated>
                <id>id:/2011/06/24/europython</id>
                <content type="html">This last week I&amp;#8217;ve been attending EuroPython over here in Firenze (or as we Americans know it, Florence), Italy. It&amp;#8217;s been a pretty amazing time, visiting the beautiful city, putting faces to names, and seeing some great presentations. More importantly, and the main reason for my trip &amp;hellip;</content>
                <author>
                    <name>David Cramer</name>
                    <url>http://justcramer.com/</url>
                </author>
            </entry>
        
    
        
            <entry>
                <title>Creating a Read-only Mirror for your GitHub Server</title>
                <link href="http://justcramer.com/2011/05/09/creating-a-one-way-git-server-mirror"/>
                <updated>2011-05-09T00:00:00-07:00</updated>
                <id>id:/2011/05/09/creating-a-one-way-git-server-mirror</id>
                <content type="html">Recently we&amp;#8217;ve been transitioning our git repositories to GitHub. We chose to go this route for a variety of reasons, but mostly
because they have kickass pull requests, which we&amp;#8217;re going to test run as code reviews. However, one of the requirements of this process was that
our original &amp;hellip;</content>
                <author>
                    <name>David Cramer</name>
                    <url>http://justcramer.com/</url>
                </author>
            </entry>
        
    
        
            <entry>
                <title>Setting Up Your Own PyPi Server</title>
                <link href="http://justcramer.com/2011/04/04/setting-up-your-own-pypi-server"/>
                <updated>2011-04-04T00:00:00-07:00</updated>
                <id>id:/2011/04/04/setting-up-your-own-pypi-server</id>
                <content type="html">Ever had problems with PyPi being unreachable? Dislike dealing with requirement.txt files just to support a git repository? For a low low price of FREE, and an hour of labor, get your very own PyPi server and solve all of your worries!

Set up Chishop

We&amp;#8217;re going to jump right into this one &amp;hellip;</content>
                <author>
                    <name>David Cramer</name>
                    <url>http://justcramer.com/</url>
                </author>
            </entry>
        
    
        
            <entry>
                <title>Building Cursors for the Disqus API</title>
                <link href="http://justcramer.com/2011/03/08/building-cursors-for-the-disqus-api"/>
                <updated>2011-03-08T00:00:00-08:00</updated>
                <id>id:/2011/03/08/building-cursors-for-the-disqus-api</id>
                <content type="html">This last week we&amp;#8217;ve been implementing cursors for the Disqus API (3.0). If you&amp;#8217;re not familiar, the concept is like cursors in your database: create a marker for where you are with your result set so you can iterate through a large set of results efficiently. Think of it like a &amp;hellip;</content>
                <author>
                    <name>David Cramer</name>
                    <url>http://justcramer.com/</url>
                </author>
            </entry>
        
    
        
            <entry>
                <title>Error Tracing in Sentry</title>
                <link href="http://justcramer.com/2011/01/25/error-tracing-in-sentry"/>
                <updated>2011-01-25T00:00:00-08:00</updated>
                <id>id:/2011/01/25/error-tracing-in-sentry</id>
                <content type="html">A few weeks ago we pushed out an update to Sentry, bumping it&amp;#8217;s version to 1.6.0. Among the changes was a new &amp;#8220;Sentry ID&amp;#8221; value which is created by the client, rather than relying on the server. This seems like something insignificant, but it allows you to do something very &amp;hellip;</content>
                <author>
                    <name>David Cramer</name>
                    <url>http://justcramer.com/</url>
                </author>
            </entry>
        
    
        
            <entry>
                <title>Settings in Django</title>
                <link href="http://justcramer.com/2011/01/13/settings-in-django"/>
                <updated>2011-01-13T00:00:00-08:00</updated>
                <id>id:/2011/01/13/settings-in-django</id>
                <content type="html">I want to talk a bit about how we handle our large amounts of application configuration over at DISQUS. Every app has it, and it seems like theres a hundred different ways that you can manage it. While I&amp;#8217;m not going to say ours is the best way, it has allowed us a very flexible application &amp;hellip;</content>
                <author>
                    <name>David Cramer</name>
                    <url>http://justcramer.com/</url>
                </author>
            </entry>
        
    
</feed>