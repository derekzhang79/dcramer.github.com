<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: heroku | David Cramer's Blog]]></title>
  <link href="http://justcramer.com/categories/heroku/atom.xml" rel="self"/>
  <link href="http://justcramer.com/"/>
  <updated>2012-06-03T18:36:10-07:00</updated>
  <id>http://justcramer.com/</id>
  <author>
    <name><![CDATA[David Cramer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Scaling Your Clouds]]></title>
    <link href="http://justcramer.com/2012/06/03/scaling-your-clouds"/>
    <updated>2012-06-03T17:53:00-07:00</updated>
    <id>http://justcramer.com/2012/06/03/scaling-your-clouds</id>
    <content type="html"><![CDATA[<p>My post yesterday seems to have gotten all the cloud fanboy's panties into a twist, so I figured I'd give them something
else to rage about.</p>




<p>There were lots of claims that without the cloud you can't scale, or you dont have redundancy, or you can't come up
with the result of <em>2 + 2</em>. I can't even explain the level of ignorance I've seen come out of the woodwork.

<p>So let's clarify some things.</p>

<h3>"The Cloud"</h3>

<p>There are many definitions that float around for "the cloud", and what it means, and more specifically what it's
supposed to do for you. When I talk about it, I'm not talking about you setting up hundreds of your own servers and
virtualizing them. <strong>We do that too.</strong> I'm talking about the notion that there's some mythical provider
that is going to cater to your needs and you're never going to have to worry about operational concerns.</p>

<p>There is nothing wrong with using Heroku, AWS, Dotcloud, or any of the hundreds of other cloud providers out there.
They all provide you with some level of relaxed operational requirements. That said, you're still restricted to whatever
completely fucking shit hardware they decide is right for virtualization. Now I'm not talking AWS so much, as they do
allow reasonable size instances, but you're still restricted to what they're willing to offer. You never
have the option to order custom hardware.</p>

<h3>Scale</h3>

<p>A bunch of the internet hipsters on Hacker News and elsewhere seem to think that if you use the cloud, your application
is going to magically scale by adding more servers to it. That may be true if you're using MongoDB, but we dont
live in a fairy tale here and it will not ever work. There are very few systems that I'm aware
of that can scale from one machine to tens to hundreds to thousands without a massive rearchitecture of how you use the
system.</p>

<p>One of the first things I pointed out in my article was the fact that I had to spin up large amounts of instances to
handle temporary workload. Look, I was using the cloud, yay I'm scalable! Except that we forgot one important factor:
I have a database, and I cant just "spin up more database". There are many amazing systems out there that are built
on the notion of distributed data with the goal of some level of horizontal scalability (<a href="http://basho.com/products/riak-overview/">Riak</a>,
<a href="http://cassandra.apache.org/">Cassandra</a>). They also do not allow youto spin up more servers and gain more capacity immediately.</p>

<h3>Operations Complexity</h3>

<p>Another argument that was brought up was the fact that I now personally have to deal with redundancy, monitoring, security
fixes, OS upgrades, bringing up more servers, etc.. Sure, that's true. Except that that will cost me far less time than I would
have spent trying to create a SQL database that can horizontal scale to infinity.</p>

<ul>
    <li>Redundancy is easy, especially at small scale. Cloud hosting is not going to solve your database redundancy for you.</li>
    <li>Just because I'm hosting my own machines doesnt mean I cant use New Relic, or in my case <a href="http://scoutapp.com">Scout</a>.</li>
    <li>I dont need to frequently bring up additional servers to handle the load because my actual hardware performs 2000 times better than my old virtualized hardware</li>
    <li>Security updates? OS reloads? Its not like I'm compiling shit by hand, and through the convenience of configuration management this is unbelievably easy.</li>
</ul>

<p>If you ignore the entirety of operations, you will never have any idea what's going on when there's a problem.</p>

<h3>The Time/Cost Tradeoff</h3>

<p>In my original post I stated it took me about three days to get everything into Chef, and have the new hardware ordered and online. Even if this was three full days of my time, I had just spent four days a previous trying to get the infinitely scalable cloud solution to perform well enough. Simple math right, four is more than three. <strong>Not worth it.</strong></p>

<p>I built <a href="https://www.getsentry.com">getsentry.com</a> specifically with the goal of optimizing cost vs
profit margins. Ths is the first month that it's been profitable, and unless every single customer jumps ship at once,
it's unlikely that I will ever have to put my own money (excluding my time) into the project again.</p>

<h3>tl;dr</h3>

<p>Virtualized computing has many great uses, but you do not <strong>need</strong> it, especially if you're just starting
a business. You can be <em>anything</em> at <em>any random company</em> and tell me you use the cloud successfully, and
I'll give you a pat on the back. I'll then tell you that we rent servers successfully, and by we, I mean <a href="http://disqus.com">DISQUS</a>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Cloud is Not For You]]></title>
    <link href="http://justcramer.com/2012/06/02/the-cloud-is-not-for-you"/>
    <updated>2012-06-02T13:57:00-07:00</updated>
    <id>http://justcramer.com/2012/06/02/the-cloud-is-not-for-you</id>
    <content type="html"><![CDATA[<p>Well, maybe not specifically <em>you</em>, but the mass that screams it will solve their problems.</p>




<p>It's been a fun year so far. There's been exciting things happening both for me personally, as well as at DISQUS. One of
those things has been launching a new side project, <a href="https://www.getsentry.com">getsentry.com</a>. This is about
it's 4th month running publicly, and it's been doing very well. I wanted to talk a little bit about where it started, and
how quickly it's shifted in the stance of where it's going.</p>




<p>Around Christmas of 2011, and after a lot of prodding by <a href="http://www.craigkerstiens.com/">Craig Kerstiens</a> (of Heroku)
I had finally given in to the pressure of creating a hosted version of Sentry to launch as a Heroku addon. I already knew
Sentry was awesome, as did many others, and this just meant getting something I put a lot of effort into out in front of
so many others. It was very little work to get things up and running on Heroku, and just as easy to setup the addon
endpoints. We started a private beta shortly thereafter, and immediately picked up a bunch of the Django/Python crowd.</p>




<p>From there it slowly, but steadily grew in both customers and data. In fact, for the first couple of months we were able
to survive on just a few dynos and the first tier of dedicated postgres (which was the $200 package at the time). We've
also expanded to cover nearly all popular languages, including PHP, Ruby, Java, and even JavaScript.</p>




<p>A bit further in the background of how I structured the Sentry service:</p>




<ul>
    <li>Two separate apps (www and app)</li>
    <li>SSL everywhere (two certs, two addons, $40/month plus SSL cert costs)</li>
    <li>A minimum of two dynos each ($72/month~)</li>
    <li>Tier-1 dedicated DB (Ronin, $200/month)</li>
</ul>




<p>Now, before I continue, let me say that I thoroughly enjoyed using Heroku. It's a great service, I'm friends with a lot
of people there. That said, I want to explain why you shouldn't use Heroku, or the cloud. Let me also clarify that I'm not
talking about the limitations of the idea of the cloud, but more specifically the limitations I've seen from providers,
and specifically my experience with Heroku.</p>




<p>Right from the get-go we had a system that had pretty good HA and redundancy, especially due to how Heroku's Postgres
solution works. Unfortunately, we quickly saw the limitations of what both the Postgres and the dynos could handle.</p>




<p>Our first attempt to address this was to add worker nodes (ala Celery) to handle concurrency better. This turned into one
or two additional dynos dedicated to processing jobs, as well as an additional Redis addon. Unfortunately the Redis addon
is completely overpriced, we quickly shifted to pulling up a VM in Linode's eastcoast datacenter instead. This bought us
a little bit of time, but really I'd say we were only given an additional 10% capacity by what should have been a large
optimization.</p>




<p>Another week or two went by, and it was suggested that we get off the Ronin database, and upgrade to the Fugu package (
which bumped up the database cost to $400/month). This did quite a bit. In fact, this let us handle most things without
too much of a concern. A little while down the road, we had a customer sign up who was actually send realistic amounts of
data. More specifically, <strong>not even close to the amount of data Disqus' Sentry server handles</strong>, but about 10x
more than the rest of our customers combined had been sending.</p>




<p>Then shit started to hit the fan.</p>




<p>In no specific order, we started finding numerous problems with various systems:</p>




<ul>
    <li>Redis takes too much memory to reliably queue Sentry jobs.</li>
    <li>Dynos are either memory or CPU bound, but we have no idea how or why.</li>
    <li>The Postgres server can't handle any reasonable level of concurrency.</li>
    <li>We randomly have to spin up 20 dynos to get anywhere in the queue backlog.</li>
</ul>




<p>Given all of that, I made the decision that I was going to go back to using real hardware and managing it myself. I'm
no stranger to operations work, though it's never been my day job. I did however want to do this right, and with the advice
of my coworker, friend, and roommate, <a href="https://twitter.com/#!/sugarc0de">Mike Clarke</a> I decided I'd set these
up properly, with Chef.</p>




<p>About three days into it, and I had learned how to use Chef (I don't write Ruby), brought up two full pluggable
configurations for a db node and a web node, written a deployment script in Fabric, migrated to the new hardware and
destroyed my Heroku and Linode instances. Three days, that's all it took to replace the cloud.</p>




<p>Now you might argue that the cloud let's you scale up easily. <strong>YOU ARE WRONG, IT DOES NOT.</strong> The cloud
gives you the convenience, or more importantly, the illusion of convenience, that you can bring up nodes to add to your
network without giving it much thought. You can do that. You don't ever realistically need to do that.</p>




<p>Almost any company worth a damn can bring online a server within 24 hours, even budget companies. When have you actually
needed turnaround time faster than that? If you did, maybe you should read up on capacity planning.</p>




<p>The hosted Sentry now runs on two budget servers, one of which runs Postgres, pgbouncer, and Redis, the other handles
Nginx, Celery, memcached, and the Python webserver. The cost for these two machines? About $300/month. When I destroyed
Heroku, my bill was looking to be around $600-700 between Heroku and Linode. Given the numbers we run at Disqus, the
physical hardware should be able to handle no less than 2000% the capacity I was struggling to handle on the cloud.</p>




<p>I'm not saying you can't make use of the cloud. For example, Disqus uses Amazon for running large amounts of map/reduce
work. You know, <strong>elastic computing</strong>, the kind of computing that is inconsistent, unplanned, or generally
infrequent. I'm also not saying you shouldn't use Heroku. You should see if it works for you. However, if you ever come up
to me and argue that the cloud is going to fix any problem, I'll make the assumption that you're one of those annoying
kids that runs around screaming MongoDB and Node.js are the answer to all of the worlds problems.</p>

]]></content>
  </entry>
  
</feed>
